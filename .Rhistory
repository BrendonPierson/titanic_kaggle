```{r}
colSums(is.na(train))
createNewFeatures <- function(data) {
trainMod <- data
trainMod$Title <- gsub('(.*, )|(\\..*)', '', data$Name)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
trainMod$Title[trainMod$Title == 'Mlle']        <- 'Miss'
trainMod$Title[trainMod$Title == 'Ms']          <- 'Miss'
trainMod$Title[trainMod$Title == 'Mme']         <- 'Mrs'
trainMod$Title[trainMod$Title %in% rare_title]  <- 'Rare Title'
return(trainMod)
}
trainMod <- createNewFeatures(train)
testMod <- createNewFeatures(test)
str(trainMod)
factorize <- function(data) {
colsToFactor <- c("Pclass", "Sex", "Parch", "SibSp", "Title")
data[colsToFactor] <- lapply(data[colsToFactor], factor)
return(data)
}
trainMod <- factorize(trainMod)
trainMod$Survived <- factor(trainMod$Survived)
testMod <- factorize(testMod)
preProcImp <- function(data) {
preProcValues <- preProcess(data, method="knnImpute")
trainModImp <- predict(preProcValues, data)
return(trainModImp)
}
trainModImp <- preProcImp(trainMod)
trainModImp <- preProcImp(trainMod)
testModImp <- preProcImp(testMod)
testModImp <- preProcImp(testMod)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
glmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title, data = trainModImp,
method = "glm",
trControl = fitControl)
glmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title, data = trainModImp,
method = "glm",
trControl = fitControl)
prediction <- predict(glmModel, testModImp, type = "raw")
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
glmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title, data = trainModImp,
method = "glm",
trControl = fitControl)
prediction <- predict(glmModel, testModImp, type = "raw")
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
solution
write.csv(solution, file = 'glm_solution_2.csv', row.names = F)
factorize <- function(data) {
colsToFactor <- c("Pclass", "Sex", "Parch", "SibSp", "Title")
data[colsToFactor] <- lapply(data[colsToFactor], factor)
return(data)
}
trainMod <- factorize(trainMod)
trainMod$Survived <- factor(trainMod$Survived)
testMod <- factorize(testMod)
preProcImp <- function(data) {
preProcValues <- preProcess(data, method="knnImpute")
trainModImp <- predict(preProcValues, data)
return(trainModImp)
}
trainModImp <- preProcImp(trainMod)
trainModImp <- preProcImp(trainMod)
testModImp <- preProcImp(testMod)
trainModImp <- preProcImp(trainMod)
testModImp <- preProcImp(testMod)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
testModImp <- preProcImp(testMod)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
glmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title, data = trainModImp,
method = "glm",
trControl = fitControl)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
solution
write.csv(solution, file = 'glm_solution_2.csv', row.names = F)
str(glmModel)
summary(glmModel)
gbmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title, data = trainModImp,
method = "gbm",
trControl = fitControl)
summary(gbmModel)
predictionGbm <- predict(gbmModel, testModImp, type = "raw")
solutionGbm <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
solution
write.csv(solution, file = 'gbm_solution_1.csv', row.names = F)
summary(gbmModel)
glmBoostModel <- train(Survived ~ ., data = trainModImp,
method = "glmboost", metric="ROC", tuneLength=5,
family=Binomial(link = c("logit")),
trControl = fitControl)
trainModImp$Survived
glmBoostModel <- train(Survived ~ ., data = trainModImp,
method = "glmboost", metric="ROC", tuneLength=5,
family=Binomial(link = c("logit")),
trControl = fitControl)
glmBoostModel <- train(Survived ~ ., data = as.data.frame(trainModImp),
method = "glmboost", metric="ROC", tuneLength=5,
family=Binomial(link = c("logit")),
trControl = fitControl)
trainModImp
str(trainModImp)
drops = c("Name", "Ticket", "Cabin", "Embarked")
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
family=Binomial(link = c("logit")),
trControl = fitControl)
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
fitControlGlmBoost <- trainControl(method = "repeatedcv",
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary,
repeats = 10)
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
drops = c("Name", "Ticket", "Cabin", "Embarked")
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
?make.names
trainModImp[,-which(names(trainModImp) %in% drops)]
drops = c("Name", "Ticket", "Cabin", "Embarked", "PassengerId")
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
trainModImp[,-which(names(trainModImp) %in% drops)]
drops = c("Name", "Ticket", "Cabin", "Embarked", "PassengerId")
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
trainModImp[,-which(names(trainModImp) %in% drops)]
glmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title, data = trainModImp,
method = "glm",
trControl = fitControl)
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
trControl = fitControlGlmBoost)
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
family=Binomial,
trControl = fitControlGlmBoost)
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
family=binomial,
trControl = fitControlGlmBoost)
str(trainModImp)
str(trainModImp[,-which(names(trainModImp) %in% drops)])
make.names(levels(trainModImp))
make.names(levels(trainModImp$Survived))
levels(trainModImp$Survived) <- make.names(levels(trainModImp$Survived))
str(trainModImp)
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
family=binomial,
trControl = fitControlGlmBoost)
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
#family=binomial,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
str(trainModImp)
str(trainModImp[,-which(names(trainModImp) %in% drops)])
fitControlGlmBoost <- trainControl(method = "repeatedcv",
number = 10,
classProbs = TRUE,
repeats = 10)
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
#family=binomial,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
fitControlGlmBoost <- trainControl(method = "repeatedcv",
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary,
repeats = 10)
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
family=binomial,
# family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
str(trainModImp[,-which(names(trainModImp) %in% drops)])
colnames(trainModImp)[which(names(trainModImp) == "Title")] = "`Title`"
str(trainModImp)
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
# family=binomial,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
str(trainModImp)
str(trainModImp[,-which(names(trainModImp) %in% drops)])
drops = c("Name", "Ticket", "Cabin", "Embarked", "PassengerId", "Title")
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
# family=binomial,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
drops = c("Name", "Ticket", "Cabin", "Embarked", "PassengerId", "`Title`")
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
# family=binomial,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
summary(glmBoostModel)
levels(trainModImp$Title) <- make.names(levels(trainModImp$Title))
colnames(trainModImp)[which(names(trainModImp) == "`Title`")] = "Title"
levels(trainModImp$Title) <- make.names(levels(trainModImp$Title))
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
# family=binomial,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
# family=binomial,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
)
drops = c("Name", "Ticket", "Cabin", "Embarked", "PassengerId")
glmBoostModel <- train(Survived ~ ., data = trainModImp[,-which(names(trainModImp) %in% drops)],
method = "glmboost", metric="ROC", tuneLength=5,
# family=binomial,
family=Binomial(link = c("logit")),
trControl = fitControlGlmBoost)
summary(glmBoostModel)
plot(glmBoostModel)
predictionGlmBoostm <- predict(glmBoostModel, testModImp, type = "raw")
return(data[, -which(names(trainModImp) %in% drops)])
return(data[, -which(names(data) %in% drops)])
glmBoostPreProc <- function(data) {
drops = c("Name", "Ticket", "Cabin", "Embarked", "PassengerId")
levels(data$Survived) <- make.names(levels(data$Survived))
levels(data$Title) <- make.names(levels(data$Title))
return(data[, -which(names(data) %in% drops)])
}
glmBoostTest <- glmBoostPreProc(testModImp)
glmBoostPreProc <- function(data) {
drops = c("Name", "Ticket", "Cabin", "Embarked", "PassengerId")
levels(data$Title) <- make.names(levels(data$Title))
return(data[, -which(names(data) %in% drops)])
}
glmBoostTest <- glmBoostPreProc(testModImp)
predictionGlmBoostm <- predict(glmBoostModel, glmBoostTest, type = "raw")
str(glmBoostTest)
predictionGlmBoostm <- predict(glmBoostModel, glmBoostTest, type = "raw")
predictionGlmBoostm <- predict(glmBoostModel, glmBoostTest)
str(glmBoostTest$Parch)
str(trainModImp$Parch)
trainModImpParch = trainModImp[ifelse(trainModImp$Parch == "7", "6", trainModImp$Parch)]
str(trainModImpParch )
trainModImpParch = trainModImp[ifelse(trainModImp$Parch == "7", "6", trainModImp$Parch) , ]
str(trainModImpParch)
glmBoostTest = glmBoostTest[ifelse(glmBoostTest$Parch == "7", "6", glmBoostTest$Parch) , ]
str(glmBoostTest)
predictionGlmBoostm <- predict(glmBoostModel, glmBoostTest)
solutionGlmBoost <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
solutionGlmBoost
write.csv(solutionGlmBoost, file = 'glm_boost_1.csv', row.names = F)
rf_model<-train(Survived~., data = trainModImp[,-which(names(trainModImp) %in% drops)],method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
plot(rf_model)
summary(rf_model)
head(rf_model)
predictionRF<- predict(rf_model, testModImp)
testModImpRF = testModImp[ifelse(testModImp$Parch == "7", "6", testModImp$Parch) , ]
predictionRF <- predict(rf_model, testModImp)
predictionRF <- predict(rf_model, testModImpRF)
solutionRF <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
solutionRF
write.csv(solutionRF, file = 'rf_1.csv', row.names = F)
plot(glmBoostModel)
trainModImp
trainModImp
summary(trainModImp)
table(trainModImp$Embarked)
preProcImp <- function(data) {
preProcValues <- preProcess(data, method="knnImpute")
trainModImp <- predict(preProcValues, data)
trainModImp = trainModImp[ifelse(is.na(trainModImp$Embarked), "S", trainModImp$Embarked),]
return(trainModImp)
}
trainModImp <- preProcImp(trainMod)
colSums(is.na(trainModImp))
colSums(is.na(trainModImp))
preProcImp <- function(data) {
preProcValues <- preProcess(data, method="knnImpute")
trainModImp <- predict(preProcValues, data)
trainModImp$Embarked = lapply(trainModImp$Embarked, function(x) ifelse(is.na(x), "S", x)
return(trainModImp)
trainModImp$Embarked = lapply(trainModImp$Embarked, function(x) ifelse(is.na(x), "S", x))
preProcImp <- function(data) {
preProcValues <- preProcess(data, method="knnImpute")
trainModImp <- predict(preProcValues, data)
trainModImp$Embarked = lapply(trainModImp$Embarked, function(x) ifelse(is.na(x), "S", x))
return(trainModImp)
}
trainModImp <- preProcImp(trainMod)
testModImp <- preProcImp(testMod)
glmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title + Embarked, data = trainModImp,
method = "glm",
trControl = fitControl)
colsToFactor <- c("Pclass", "Sex", "Parch", "SibSp", "Title", "Eembarked")
factorize <- function(data) {
colsToFactor <- c("Pclass", "Sex", "Parch", "SibSp", "Title", "Eembarked")
data[colsToFactor] <- lapply(data[colsToFactor], factor)
return(data)
}
trainMod <- factorize(trainMod)
trainMod$Survived <- factor(trainMod$Survived)
testMod <- factorize(testMod)
factorize <- function(data) {
colsToFactor <- c("Pclass", "Sex", "Parch", "SibSp", "Title", "Embarked")
data[colsToFactor] <- lapply(data[colsToFactor], factor)
return(data)
}
trainMod <- factorize(trainMod)
trainMod$Survived <- factor(trainMod$Survived)
testMod <- factorize(testMod)
preProcImp <- function(data) {
preProcValues <- preProcess(data, method="knnImpute")
trainModImp <- predict(preProcValues, data)
trainModImp$Embarked = lapply(trainModImp$Embarked, function(x) ifelse(is.na(x), "S", x))
return(trainModImp)
}
trainModImp <- preProcImp(trainMod)
trainModImp <- preProcImp(trainMod)
testModImp <- preProcImp(testMod)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
glmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title + Embarked, data = trainModImp,
method = "glm",
trControl = fitControl)
trainMod <- factorize(trainMod)
trainModImp <- preProcImp(trainMod)
trainModImp <- preProcImp(trainMod)
testModImp <- preProcImp(testMod)
glmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title + Embarked, data = trainModImp,
method = "glm",
trControl = fitControl)
trainMod <- factorize(trainMod)
colSums(is.na(trainModImp))
str(trainModImp)
preProcImp <- function(data) {
preProcValues <- preProcess(data, method="knnImpute")
trainModImp <- predict(preProcValues, data)
trainModImp$Embarked = lapply(trainModImp$Embarked, function(x) ifelse(is.na(x), 3, x))
return(trainModImp)
}
trainModImp <- preProcImp(trainMod)
trainModImp <- preProcImp(trainMod)
testModImp <- preProcImp(testMod)
glmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title + Embarked, data = trainModImp,
method = "glm",
trControl = fitControl)
trainModImp <- preProcImp(trainMod)
str(trainModImp)
factorize <- function(data) {
data$Embarked = lapply(data$Embarked, function(x) ifelse(is.na(x), "S", x))
colsToFactor <- c("Pclass", "Sex", "Parch", "SibSp", "Title", "Embarked")
data[colsToFactor] <- lapply(data[colsToFactor], factor)
return(data)
}
trainMod <- factorize(trainMod)
trainMod$Survived <- factor(trainMod$Survived)
trainMod <- factorize(trainMod)
factorize <- function(data) {
data$Embarked = lapply(data$Embarked, function(x) ifelse(is.na(x), "S", x))
colsToFactor <- c("Pclass", "Sex", "Parch", "SibSp", "Title", "Embarked")
data[colsToFactor] <- lapply(data[colsToFactor], factor)
return(data)
}
trainMod <- factorize(trainMod)
trainMod <- createNewFeatures(train)
testMod <- createNewFeatures(test)
trainMod <- factorize(trainMod)
trainMod <- createNewFeatures(train)
testMod <- createNewFeatures(test)
trainMod$Embarked = lapply(trainMod$Embarked, function(x) ifelse(is.na(x), "S", x))
trainMod <- factorize(trainMod)
factorize <- function(data) {
colsToFactor <- c("Pclass", "Sex", "Parch", "SibSp", "Title", "Embarked")
data[colsToFactor] <- lapply(data[colsToFactor], factor)
return(data)
}
trainMod <- createNewFeatures(train)
testMod <- createNewFeatures(test)
factorize <- function(data) {
colsToFactor <- c("Pclass", "Sex", "Parch", "SibSp", "Title", "Embarked")
data[colsToFactor] <- lapply(data[colsToFactor], factor)
return(data)
}
trainMod$Embarked = lapply(trainMod$Embarked, function(x) ifelse(is.na(x), "S", x))
str(trainMod)
trainMod <- createNewFeatures(train)
trainMod$Embarked = apply(trainMod$Embarked, function(x) ifelse(is.na(x), "S", x))
trainMod$Embarked = apply(trainMod$Embarked, 2, function(x) ifelse(is.na(x), "S", x))
trainMod <- createNewFeatures(train)
trainMod$Embarked = apply(trainMod$Embarked, 2, function(x) ifelse(is.na(x), "S", x))
trainMod <- createNewFeatures(train)
trainMod
str(trainMod$Embarked)
trainMod = trainMod[ifelse(is.na(trainMod$Embarked), "S", trainMod$Embarked),]
str(trainMod)
trainMod <- createNewFeatures(train)
trainMod = trainMod[ifelse(is.na(trainMod$Embarked), "S", trainMod$Embarked)]
trainMod = trainMod[,ifelse(is.na(trainMod$Embarked), "S", trainMod$Embarked)]
trainMod <- createNewFeatures(train)
testMod <- createNewFeatures(test)
trainMod$Embarked[is.na(trainMod$Embarked)] <- "S"
factorize <- function(data) {
colsToFactor <- c("Pclass", "Sex", "Parch", "SibSp", "Title", "Embarked")
data[colsToFactor] <- lapply(data[colsToFactor], factor)
return(data)
}
str(trainMod$Embarked)
trainMod <- factorize(trainMod)
trainMod$Survived <- factor(trainMod$Survived)
testMod <- factorize(testMod)
trainModImp <- preProcImp(trainMod)
trainModImp <- preProcImp(trainMod)
testModImp <- preProcImp(testMod)
glmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title + Embarked, data = trainModImp,
method = "glm",
trControl = fitControl)
factorize <- function(data) {
colsToFactor <- c("Pclass", "Sex", "Parch", "SibSp", "Title", "Embarked")
data[colsToFactor] <- lapply(data[colsToFactor], factor)
return(data)
}
trainMod <- factorize(trainMod)
trainMod$Survived <- factor(trainMod$Survived)
glmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title + Embarked, data = trainModImp,
method = "glm",
trControl = fitControl)
str(trainModImp)
train <- read.csv('./input/train.csv', stringsAsFactors = F, na.strings="")
test  <- read.csv('./input/test.csv', stringsAsFactors = F, na.strings="")
createNewFeatures <- function(data) {
trainMod <- data
trainMod$Title <- gsub('(.*, )|(\\..*)', '', data$Name)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
trainMod$Title[trainMod$Title == 'Mlle']        <- 'Miss'
trainMod$Title[trainMod$Title == 'Ms']          <- 'Miss'
trainMod$Title[trainMod$Title == 'Mme']         <- 'Mrs'
trainMod$Title[trainMod$Title %in% rare_title]  <- 'Rare Title'
trainMod$Embarked[is.na(trainMod$Embarked)] <- "S"
return(trainMod)
}
trainMod <- createNewFeatures(train)
testMod <- createNewFeatures(test)
factorize <- function(data) {
colsToFactor <- c("Pclass", "Sex", "Parch", "SibSp", "Title", "Embarked")
data[colsToFactor] <- lapply(data[colsToFactor], factor)
return(data)
}
preProcImp <- function(data) {
preProcValues <- preProcess(data, method="knnImpute")
trainModImp <- predict(preProcValues, data)
return(trainModImp)
}
trainMod <- factorize(trainMod)
trainMod$Survived <- factor(trainMod$Survived)
testMod <- factorize(testMod)
trainModImp <- preProcImp(trainMod)
testModImp <- preProcImp(testMod)
testModImp
testModImp
summary(testModImp)
str(testModImp)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
glmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title + Embarked, data = trainModImp,
method = "glm",
trControl = fitControl)
summary(glmModel)
summary(glmModel)
summary(glmModel)
prediction <- predict(glmModel, testModImp, type = "raw")
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
solution
write.csv(solution, file = 'glm_solution_3.csv', row.names = F)
rf_model<-train(Survived~., data = trainModImp[,-which(names(trainModImp) %in% drops)],method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
testModImpRF = testModImp[ifelse(testModImp$Parch == "7", "6", testModImp$Parch) , ]
predictionRF <- predict(rf_model, testModImpRF)
solutionRF <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solutionRF, file = 'rf_2.csv', row.names = F)
gbmModel <- train(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title, data = trainModImp,
method = "gbm",
trControl = fitControl)
